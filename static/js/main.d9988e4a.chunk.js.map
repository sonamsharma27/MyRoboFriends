{"version":3,"sources":["Card.js","Cardlist.js","Scroll.js","Searchbox.js","App.js","reportWebVitals.js","index.js"],"names":["Card","name","email","id","className","alt","src","Cardlist","robots","map","user","i","Scroll","props","style","overflowY","height","children","Searchbox","searchChange","type","placeholder","onChange","App","useState","setRobots","searchfield","setSearchfield","useEffect","fetch","then","response","json","filteredRobots","filter","robot","toLowerCase","includes","length","event","target","value","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"iMAceA,EAZF,SAAC,GAAoB,IAAnBC,EAAkB,EAAlBA,KAAKC,EAAa,EAAbA,MAAMC,EAAO,EAAPA,GAEzB,OAEC,sBAAKC,UAAY,yEAAjB,UACA,qBAAKC,IAAKJ,EAAMK,IAAG,+BAA2BH,EAA3B,cACnB,gCACA,6BAAKF,IACL,4BAAIC,WCWSK,EAjBE,SAAC,GAAa,IAAZC,EAAW,EAAXA,OAGlB,OAAO,8BACLA,EAAOC,KAAI,SAACC,EAAKC,GAElB,OAAO,cAAC,EAAD,CAENR,GAAIK,EAAOG,GAAGR,GACdF,KAAMO,EAAOG,GAAGV,KAChBC,MAAOM,EAAOG,GAAGT,OAHVM,EAAOG,GAAGR,UCCLS,EATA,SAACC,GAChB,OACG,qBAAKC,MAAO,CAACC,UAAW,SAAUC,OAAQ,SAAYZ,UAAU,mBAAhE,SACCS,EAAMI,YCSKC,G,KAXG,SAAC,GAAmB,IAAlBC,EAAiB,EAAjBA,aACnB,OAEC,uBAAOf,UAAW,2CAClBgB,KAAK,SACJC,YAAY,gBACNC,SAAUH,MCyDJI,MA3Df,WAUC,MAA4BC,mBAAS,IAArC,mBAAOhB,EAAP,KAAeiB,EAAf,KACA,EAAsCD,mBAAS,IAA/C,mBAAOE,EAAP,KAAoBC,EAApB,KAQAC,qBAAU,WACTC,MAAM,8CACAC,MAAK,SAAAC,GAAQ,OAAGA,EAASC,UACzBF,MAAK,SAAApB,GAAOe,EAAUf,QAE1B,IAGH,IAKOuB,EAAiBzB,EAAO0B,QAAO,SAAAC,GAEtC,OAAOA,EAAMlC,KAAKmC,cAAcC,SAASX,EAAYU,kBAEpD,OAAmB,IAAhB5B,EAAO8B,OACD,+CAID,sBAAKlC,UAAU,QAAf,UACN,oBAAIA,UAAU,WAAd,yBACA,cAAC,EAAD,CAAWe,aAhBO,SAACoB,GAEfZ,EAAeY,EAAMC,OAAOC,UAehC,cAAC,EAAD,UAEA,cAAC,EAAD,CAAUjC,OAAQyB,UC1CPS,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBd,MAAK,YAAkD,IAA/Ce,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCEdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACC,cAAC,EAAD,MAEDC,SAASC,eAAe,SAM1BZ,M","file":"static/js/main.d9988e4a.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nconst Card = ({name,email,id})=> {\r\n\t\r\n\treturn(\r\n\r\n\t\t<div className = 'tc bg-light-green dib br4 bw1 ba b--dark-green  ma2 pa2 grow  shadow-5' > \r\n\t\t<img alt={name} src= {`https://robohash.org/${id}?200x200`}/>\r\n\t\t<div>\r\n\t\t<h2>{name}</h2>\r\n\t\t<p>{email}</p>\r\n\t\t</div>\t\r\n\t\t</div>);\r\n}\r\nexport default Card;","import React from 'react';\r\nimport Card from './Card.js';\r\n\r\n\r\nconst Cardlist = ({robots})=> {\r\n\t\r\n\r\n\treturn(<div>\r\n\t\t{robots.map((user,i)=>\r\n\t{\r\n\t\treturn(<Card \r\n\t\t\tkey = {robots[i].id}\r\n\t\t\tid={robots[i].id} \r\n\t\t\tname={robots[i].name} \r\n\t\t\temail={robots[i].email}/>);\r\n\t})}\r\n\t\t</div>\r\n\t\t);\r\n\r\n}\r\n\r\nexport default Cardlist;","import React from 'react';\r\n\r\n\r\nconst Scroll = (props) => {\r\nreturn(\r\n   <div style={{overflowY: 'scroll', height: '600px', }} className=' bw1 ba b--black'>\r\n   {props.children}\r\n   </div>\r\n\t);\r\n\r\n};\r\n\r\nexport default Scroll;","import React from 'react';\r\nimport 'tachyons';\r\n\r\n\r\nconst Searchbox = ({searchChange})=> {\r\n\treturn (\r\n\r\n\t\t<input className ='pa2 br3 tc bw1 bg-light-blue ba b--blue '\r\n\t\ttype='search'\r\n\t\t placeholder='Search Robots'\r\n         onChange={searchChange}\r\n\t\t />\r\n\t\t);\r\n}\r\n\r\nexport default Searchbox;","import React, {useState, useEffect} from 'react';\r\nimport Cardlist from './Cardlist.js';\r\n\r\nimport Scroll from './Scroll';\r\nimport 'tachyons';\r\nimport Searchbox from './Searchbox';\r\nimport {robots} from './robots.js';\r\n\r\nfunction App()\r\n{\r\n\t// constructor()\r\n\t// { super();\r\n\t//  this.state = {\r\n\t// robots: robots,\r\n\t// searchfield: ''\r\n\t// \t}\r\n\t// }\r\n\r\n\tconst [robots, setRobots] = useState([]);\r\n\tconst [searchfield, setSearchfield] = useState('');\r\n\t// componentDidMount() //kinda keyword\r\n\t// {\r\n //       fetch('https://jsonplaceholder.typicode.com/users')\r\n //       .then(response=> response.json()) //need to return response...using single line in this case and therefore no need to use return keyword\r\n //       .then(user=>{this.setState({robots: user});\r\n //       });\r\n\t// }\r\n\tuseEffect(()=> {\r\n\t\tfetch('https://jsonplaceholder.typicode.com/users')\r\n       .then(response=> response.json()) //need to return response...using single line in this case and therefore no need to use return keyword\r\n       .then(user=>{setRobots(user);\r\n       });\r\n\t}, [])   // 2nd parameterin useEffect ensures that useEfect runs only when the 2nd parameter changes....\r\n\t\t\t//we are using [] here because it doesnt change and hence we dont get an infinite loop\r\n\r\n\tconst onSearchChange=(event)=>{\r\n\t\t// this.setState({\tsearchfield: event.target.value});\r\n        setSearchfield(event.target.value);\r\n\t}\r\n\t{\r\n\t\tconst filteredRobots = robots.filter(robot=>\r\n{\r\n\treturn robot.name.toLowerCase().includes(searchfield.toLowerCase());\r\n})\r\n\t\tif(robots.length===0)\r\n\t\t\t{return(<h1>Loading......</h1>);}\r\n\t\t\t\telse\r\n\t\t\t\t{\r\n\t\t\t\t\treturn(\r\n          <div className=' tc  '>\r\n\t\t  <h1 className='f1 grow '>RoboFriends</h1>\r\n\t\t  <Searchbox searchChange={onSearchChange}/>\r\n\t\t  <Scroll>\r\n\t\t  \r\n\t\t  <Cardlist robots={filteredRobots}/>\r\n          \r\n          </Scroll>\r\n          </div>\r\n\t\t);\r\n\t\t\t\t}\r\n\t\t\r\n\r\n\t}\r\n\t\r\n}\r\n\r\n\r\nexport default App;","const reportWebVitals = onPerfEntry => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\n\r\n\r\n\r\nimport App from \"./App.js\"\r\nimport reportWebVitals from './reportWebVitals';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n   <App/>\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}